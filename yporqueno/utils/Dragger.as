package es.yporqueno.utils {		import flash.events.Event;	import flash.events.MouseEvent;	import flash.display.Sprite;		public class Dragger extends Sprite{				private var _inercia:Number;		private var _rozamiento:Number;		private var _umbral:Number;						private var _framesAnimacion:Number = 100;		private var _xAnterior:Number;		private var _frame:Number;		private var _frameAnterior:Number = 0;		private var _vector:Number;				private var _width:Number;		private var _height:Number;		private var _alpha:Number;		public function Dragger(width:Number, height:Number, alpha:Number=0) {			_width = width;			_height = height;			_alpha = alpha;			rozamiento = 0.1;			umbral = 0.05;			inercia = 0.2;			dibujar();			this.addEventListener(Event.ADDED_TO_STAGE, addedToStage);		}				override public function set width(value:Number):void{			_width = value;			dibujar();		}				override public function set height(value:Number):void{			_height = value;			dibujar();		}				public function destroy():void{			this.removeEventListener(Event.ADDED_TO_STAGE, addedToStage);			this.removeEventListener(MouseEvent.MOUSE_DOWN, mouseDownHandler);			this.removeEventListener(Event.ENTER_FRAME, arrastrandoHandler);			this.removeEventListener(Event.ENTER_FRAME, inerciaHandler);			if(stage){				stage.removeEventListener(MouseEvent.MOUSE_UP, mouseUpHandler);			}		}				// Valor entre 0 y 1		public function set inercia(value:Number):void{			if(value<0){				_inercia = 0;			}else if(value>1){				_inercia = 1;			}else{				_inercia = value;			}		}		public function get inercia():Number{			return _inercia;		}				// Valor entre 0 y 1		public function set rozamiento(value:Number):void{			if(value<0){				_rozamiento = 1;			}else if(value>1){				_rozamiento = 0;			}else{				_rozamiento = 1-value;			}		}		public function get rozamiento():Number{			return _rozamiento;		}				// Value entre 0 y 1		public function set umbral(value:Number):void{			if(value<0){				_umbral = 0;			}else if(value>1){				_umbral = 1;			}else{				_umbral = value;			}		}		public function get umbral():Number{			return _umbral;		}				public function get value():Number{			return _frameAnterior*0.01;		}								//----------------------------------------------------------------------------------------------		private function addedToStage(e:Event):void{			this.removeEventListener(Event.ADDED_TO_STAGE, addedToStage);			this.addEventListener(MouseEvent.MOUSE_DOWN, mouseDownHandler);		}				private function dibujar():void{			this.graphics.clear();			this.graphics.beginFill(0, _alpha);			this.graphics.drawRect(0, 0, _width, _height);		}				private function mouseDownHandler(e:MouseEvent):void{			_xAnterior = mouseX;			stage.addEventListener(MouseEvent.MOUSE_UP, mouseUpHandler);			this.addEventListener(Event.ENTER_FRAME, arrastrandoHandler);		}				private function mouseUpHandler(e:MouseEvent):void{			this.removeEventListener(Event.ENTER_FRAME, arrastrandoHandler);			this.addEventListener(Event.ENTER_FRAME, inerciaHandler);		}				private function arrastrandoHandler(e:Event):void{			//trace(_vector);			_vector = (mouseX-_xAnterior)*_inercia;			_frame = _frameAnterior + _vector;			fit2Limits();			if(_frameAnterior != _frame){				_frameAnterior = _frame;				update();				_xAnterior = mouseX;			}		}						private function inerciaHandler(e:Event):void{			_vector *= _rozamiento;			if(Math.abs(_vector) < _umbral){				this.removeEventListener(Event.ENTER_FRAME, inerciaHandler);				return;			}			_frame = _frameAnterior + _vector;			fit2Limits();			_frameAnterior = _frame;			update();		}				private function fit2Limits():void{			if(_frame > _framesAnimacion){				_frame = _frame%_framesAnimacion;			}else if(_frame < 0){				_frame = _framesAnimacion+_frame%_framesAnimacion;			}		}				private function update():void{			dispatchEvent(new Event(Event.CHANGE));		}			}}